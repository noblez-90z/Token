import Layout from "./Layout";

const Documentation = () => {
  return (
    <Layout>
      <div className="py-4 px-3">
        <h2 className="font-bold text-xl py-2 capitalize">documentation</h2>
        <p>
          The Token Generator Website allows developers and users to generate
          secure tokens for authentication, session management, or API
          communication. This service provides a simple interface to generate,
          validate, and manage tokens using a secure hashing algorithm. The
          tokens can be used in web applications, mobile apps, or any other
          service that requires secure identification.
        </p>
        <nav>
          <ul>
            <li>
              Token Generation: Generates secure and unique tokens for
              authentication.
            </li>
            <li>
              Token Validation: Validates the authenticity of generated tokens.
            </li>
            <li>
              Expiration Management: Supports time-based expiration for tokens.
            </li>
            <li>Token Revocation: Allows users to revoke tokens.</li>
            <li>
              API Access: Provides RESTful API endpoints to generate and
              validate tokens.
            </li>
          </ul>
        </nav>
        <h2 className="font-bold text-xl py-2">Installation</h2>
        <h4 className="font-semibold">Prerequisites</h4>
        <p>
          before you can run the Token Generator, ensure you have the following
          installed:
        </p>
        <nav>
          <ul>
            <li>Node.js (version 14 or higher)</li>
            <li>npm (Node Package Manager)</li>
            <li>MongoDB (for storing tokens, if using persistent tokens)</li>
          </ul>
        </nav>
        <p>
          Configure environment variables: Create a .env file in the root
          directory with the following configuration:
        </p>
        <p>
          <span>bash</span>
          PORT=3000 JWT_SECRET=your-secret-key TOKEN_EXPIRATION=3600 # Token
          expiration time in seconds
          MONGODB_URI=mongodb://localhost:27017/token-generator
        </p>
        <div className="border-t-2 mt-3">
          <h2 className="font-semibold text-xl py-2">API Endpoints</h2>
          <nav>
            <ul>
              <li>Endpoint: /api/token/generate</li>
              <li>Method: POST</li>
              <li>Parameters:</li>
              <ol>
                <li>userId (required): The unique identifier for the user.</li>
                <li>
                  expiry (optional): Token expiration time in seconds (if not
                  specified, default from environment settings is used).
                </li>
              </ol>
            </ul>
          </nav>
          <li>Response</li>
          <p>
            <span>json</span>
          </p>
          <h2 className="font-bold text-xl py-2">Validate Token</h2>
          <ul>
            <li>Endpoint: /api/token/validate</li>
            <li>Method: POST</li>
            <li>Parameters</li>
            <ol>
              <li>token (required): The token to be validated.</li>
            </ol>
          </ul>
        </div>
        <div className="border-t-2 mt-3">
          <h2 className="font-bold text-xl py-2">Token Structure</h2>
          <p>
            The tokens generated by the service are JSON Web Tokens (JWTs),
            which consist of three parts: Header: Specifies the type of the
            token (JWT) and the hashing algorithm (HS256). Payload: Contains the
            user information (e.g., userId) and expiration time. Signature: A
            unique hash created using the secret key to verify the token's
            integrity.
          </p>
        </div>
        <div className="border-t-2 mt-3">
          <h3 className="font-semibold text-xl py-2">Token Expiration</h3>
          <p>
            Tokens are time-based and have an expiration time that can be
            configured globally in the environment settings (TOKEN_EXPIRATION)
            or passed during the token generation request.
          </p>
          <h3 className="font-semibold">Default Expiration</h3>
          <p>
            The default token expiration time is set to 1 hour (3600 seconds)
            unless otherwise specified.
          </p>
          <h3 className="font-semibold py-2">Custom Expiration</h3>
          <p>
            set a custom expiration for a token during generation, pass the
            expiry parameter in the request body:
          </p>
        </div>
        <div className="border-t-2 mt-3">
          <h1 className="font-semibold text-xl py-2">
            Security Considerations
          </h1>
          <ul>
            <li>
              Token Secret: Ensure that the JWT_SECRET used for signing tokens
              is a secure, randomly generated key. This secret must be kept
              confidential.
            </li>
            <li>
              HTTPS: Always use HTTPS for API requests to secure token
              transmission.
            </li>
            <li>
              Token Expiration: Enforce short-lived tokens with expiration and
              renew them periodically for better security.
            </li>
            <li>
              Token Revocation: Implement token revocation when a user logs out
              or their session is compromised.
            </li>
          </ul>
        </div>
        <div className="border-t-2 mt-3">
          <h3 className="font-semibold text-xl py-2">Error Codes</h3>
          <ul>
            <li>
              400: Bad Request – Invalid parameters or missing required fields.
            </li>
            <li>401: Unauthorized – Token is missing, invalid, or expired.</li>
            <li>
              500: Internal Server Error – An error occurred on the server.
            </li>
          </ul>
        </div>
      </div>
    </Layout>
  );
};

export default Documentation;
